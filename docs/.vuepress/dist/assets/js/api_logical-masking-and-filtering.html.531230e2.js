"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[448],{3756:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>p,data:()=>o});var e=s(641);const t={},p=(0,s(6262).A)(t,[["render",function(a,n){return(0,e.uX)(),(0,e.CE)("div",null,n[0]||(n[0]=[(0,e.Fv)('<h2 id="logical-masking-and-filtering" tabindex="-1"><a class="header-anchor" href="#logical-masking-and-filtering"><span>Logical Masking and Filtering</span></a></h2><p>Openmadness makes it easy to filter and manipulate arrays using logical maskingâ€”a powerful technique inspired by NumPy. Whether you&#39;re cleaning data, selecting specific elements, or applying conditions, logical masking helps you do it efficiently.</p><h3 id="what-is-logical-masking" tabindex="-1"><a class="header-anchor" href="#what-is-logical-masking"><span>What is Logical Masking?</span></a></h3><p>Logical masking lets you use boolean conditions (true/false) to filter or modify arrays. Instead of writing complex loops, you can apply a condition directly to an array to get the values you need.</p><h5 id="basic-example-filtering-numbers" tabindex="-1"><a class="header-anchor" href="#basic-example-filtering-numbers"><span>Basic Example: Filtering Numbers:</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> filter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span>  </span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  </span>\n<span class="line"><span class="token keyword">const</span> mask <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [false, false, true, true, true]  </span></span>\n<span class="line"><span class="token keyword">const</span> filteredNumbers <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30, 40, 50]  </span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">NOTE</p><p>Think of it like a stencil: The mask acts as a filter, letting only true values pass through.</p></div><h3 id="creating-masks-dynamically" tabindex="-1"><a class="header-anchor" href="#creating-masks-dynamically"><span>Creating Masks Dynamically</span></a></h3><p>Instead of manually writing conditions, OpenMadness provides helper functions:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> gt<span class="token punctuation">,</span> where <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span>  </span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> temperatures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  </span>\n<span class="line"><span class="token keyword">const</span> hotDays <span class="token operator">=</span> <span class="token function">gt</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [false, false, false, true, false]  </span></span>\n<span class="line"><span class="token keyword">const</span> filteredTemps <span class="token operator">=</span> <span class="token function">where</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">,</span> hotDays<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30]  </span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="common-masking-operations" tabindex="-1"><a class="header-anchor" href="#common-masking-operations"><span>Common Masking Operations:</span></a></h5><table><thead><tr><th>Function</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><code>eq(a, b)</code></td><td><code>eq(arr, 5)</code></td><td>Values <strong>equal to</strong> 5</td></tr><tr><td><code>gt(a, b)</code></td><td><code>gt(arr, 10)</code></td><td>Values <strong>greater than</strong> 10</td></tr><tr><td><code>lt(a, b)</code></td><td><code>lt(arr, 0)</code></td><td>Values <strong>less than</strong> 0</td></tr><tr><td><code>and(mask1, mask2)</code></td><td><code>and(maskA, maskB)</code></td><td>Combine masks (logical AND)</td></tr><tr><td><code>or(mask1, mask2)</code></td><td><code>or(maskA, maskB)</code></td><td>Combine masks (logical OR)</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">NOTE</p><p>These functions work with both arrays and scalar values!</p></div><h3 id="advanced-modifying-masked-values" tabindex="-1"><a class="header-anchor" href="#advanced-modifying-masked-values"><span>Advanced: Modifying Masked Values</span></a></h3><p>You can also replace values based on a mask:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> setWhere <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span>  </span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  </span>\n<span class="line"><span class="token keyword">const</span> failing <span class="token operator">=</span> <span class="token function">lt</span><span class="token punctuation">(</span>scores<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>\n<span class="line"><span class="token keyword">const</span> updatedScores <span class="token operator">=</span> <span class="token function">setWhere</span><span class="token punctuation">(</span>scores<span class="token punctuation">,</span> failing<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [85, 92, 60, 67, 88]  </span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ðŸš€ Pro Tip: Use setWhere for data cleaning (e.g., replacing outliers or invalid entries).</p><p>Practical Use Cases:</p><ul><li><p>Data Cleaning â€“ Filter out invalid or missing values.</p></li><li><p>Conditional Calculations â€“ Apply operations only to selected elements.</p></li><li><p>Feature Selection â€“ Extract specific parts of a dataset.</p></li></ul><p>Example - Filtering User Data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>  </span>\n<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  </span>\n<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  </span>\n<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span>  </span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span>  </span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> adults <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>\n<span class="line"><span class="token comment">// OpenMadness equivalent (if working with arrays of objects)  </span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="key-takeaways" tabindex="-1"><a class="header-anchor" href="#key-takeaways"><span>Key Takeaways</span></a></h5><p>âœ” No more manual loops â€“ Apply conditions directly.</p><p>âœ” Combine masks for complex filtering.</p><p>âœ” Modify selected values without altering the whole array.</p><p>Logical masking makes array filtering clean, fast, and readable. Try it in your next project! ðŸŽ¯</p>',26)]))}]]),o=JSON.parse('{"path":"/api/logical-masking-and-filtering.html","title":"Logical Masking and Filtering","lang":"en-US","frontmatter":{"title":"Logical Masking and Filtering"},"headers":[{"level":2,"title":"Logical Masking and Filtering","slug":"logical-masking-and-filtering","link":"#logical-masking-and-filtering","children":[{"level":3,"title":"What is Logical Masking?","slug":"what-is-logical-masking","link":"#what-is-logical-masking","children":[]},{"level":3,"title":"Creating Masks Dynamically","slug":"creating-masks-dynamically","link":"#creating-masks-dynamically","children":[]},{"level":3,"title":"Advanced: Modifying Masked Values","slug":"advanced-modifying-masked-values","link":"#advanced-modifying-masked-values","children":[]}]}],"git":{"updatedTime":1751288184000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"Â–richardnuelofficial@gmail.com","commits":1,"url":"https://github.com/Richard-Emmanuel"},{"name":"Michael Uzukwu","username":"","email":"uzukwuekene.michael@gmail.com","commits":1}],"changelog":[{"hash":"d46d405d8085a084678b2f6471706e6b014a579c","time":1751288184000,"email":"uzukwuekene.michael@gmail.com","author":"Michael Uzukwu","message":"Mikedocs (#17)"},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"Â–richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"api/logical-masking-and-filtering.md"}')}}]);