"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[420],{5633:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>o});var e=s(641);const t={},p=(0,s(6262).A)(t,[["render",function(n,a){return(0,e.uX)(),(0,e.CE)("div",null,a[0]||(a[0]=[(0,e.Fv)('<h1 id="üìò-array-reconstructor" tabindex="-1"><a class="header-anchor" href="#üìò-array-reconstructor"><span>üìò Array Reconstructor</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The <strong>Array Reconstructor</strong> is a utility function used to restore an original array from a compressed or transformed format. It is particularly useful in scenarios where data has been optimized for storage, performance, or transmission and needs to be converted back into a usable array structure.</p><p>This function is frequently applied in frontend applications, caching layers, or data manipulation scripts where arrays are encoded and later decoded for display or processing.</p><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>compressedArray</td><td>Array</td><td>An array representing compressed input. The format depends on the encoding logic.</td></tr></tbody></table><h3 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h3><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Array</td><td>A reconstructed array based on the input logic</td></tr></tbody></table><h2 id="functionality" tabindex="-1"><a class="header-anchor" href="#functionality"><span>Functionality</span></a></h2><h3 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h3><p>The function processes a compressed input (e.g., using key-value pairs or run-length encoding) and rebuilds the array to reflect its original structure. A common implementation might expect input like:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span>value<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This means value appears count times in sequence. The function loops through each pair and expands the array accordingly. Examples</p><ol><li>Reconstructing a Run-Length Encoded Array</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">reconstructArray</span><span class="token punctuation">(</span><span class="token parameter">compressed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">\t<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> count<span class="token punctuation">]</span> <span class="token keyword">of</span> compressed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">\t\t\tresult<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">\t\t<span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token punctuation">}</span></span>\n<span class="line">\t<span class="token keyword">return</span> result<span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line">\t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">\t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">\t<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token function">reconstructArray</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [1, 1, 1, 2, 2, 5]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Handling Single Entry</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> single <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reconstructArray</span><span class="token punctuation">(</span>single<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [7, 7, 7, 7, 7]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="‚ö†Ô∏è-common-issues" tabindex="-1"><a class="header-anchor" href="#‚ö†Ô∏è-common-issues"><span>‚ö†Ô∏è Common Issues</span></a></h2><table><thead><tr><th>Issue</th><th>Cause</th><th>Solution</th></tr></thead><tbody><tr><td>Empty result array</td><td>Invalid or empty input array</td><td>Validate input before processing</td></tr><tr><td>Unexpected behavior</td><td>Non-numeric count or malformed pairs</td><td>Add error handling and input checks</td></tr><tr><td>Performance issues</td><td>Very large counts in compression</td><td>Optimize loop logic if needed</td></tr></tbody></table><h2 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h2><h3 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h3><ul><li><p>element1, ‚Ä¶, elementN Initializes an array with the provided elements unless a single numeric argument is passed.</p></li><li><p>arrayLength If only one numeric argument is provided (between 0 and 2¬≥¬≤ - 1), creates an array of that length with empty slots.</p></li></ul><h2 id="exceptions" tabindex="-1"><a class="header-anchor" href="#exceptions"><span>Exceptions</span></a></h2><ul><li>RangeError Thrown when arrayLength is not an integer or is outside the accepted range.</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h2><ol><li><p><strong>Array Literal</strong> const fruits = [&quot;Apple&quot;, &quot;Banana&quot;]; console.log(fruits.length); // 2 console.log(fruits[0]); // &quot;Apple&quot;</p></li><li><p><strong>Single Numeric Parameter</strong> const arrayEmpty = new Array(3); console.log(arrayEmpty.length); // 3 console.log(0 in arrayEmpty); // false (empty slot)</p></li><li><p><strong>Single String Parameter</strong> const arrayOfOne = new Array(&quot;3&quot;); console.log(arrayOfOne.length); // 1 console.log(arrayOfOne[0]); // &quot;3&quot;</p></li><li><p><strong>Multiple Elements</strong> const mixed = new Array(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;); console.log(mixed.length); // 3</p></li></ol><h2 id="specification" tabindex="-1"><a class="header-anchor" href="#specification"><span>Specification</span></a></h2><p>ECMAScript¬Æ 2026 Language Specification Array Constructor ‚Äì ECMAScript Spec</p><h2 id="browser-compatibility" tabindex="-1"><a class="header-anchor" href="#browser-compatibility"><span>Browser Compatibility</span></a></h2><p>The Array() constructor is fully supported across all modern browsers.</p>',30)]))}]]),o=JSON.parse('{"path":"/api/omArray.html","title":"üìò Array Reconstructor","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[{"level":3,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":3,"title":"Returns","slug":"returns","link":"#returns","children":[]}]},{"level":2,"title":"Functionality","slug":"functionality","link":"#functionality","children":[{"level":3,"title":"How It Works","slug":"how-it-works","link":"#how-it-works","children":[]}]},{"level":2,"title":"‚ö†Ô∏è Common Issues","slug":"‚ö†Ô∏è-common-issues","link":"#‚ö†Ô∏è-common-issues","children":[]},{"level":2,"title":"Parameters","slug":"parameters-1","link":"#parameters-1","children":[{"level":3,"title":"Parameters","slug":"parameters-2","link":"#parameters-2","children":[]}]},{"level":2,"title":"Exceptions","slug":"exceptions","link":"#exceptions","children":[]},{"level":2,"title":"Examples","slug":"examples","link":"#examples","children":[]},{"level":2,"title":"Specification","slug":"specification","link":"#specification","children":[]},{"level":2,"title":"Browser Compatibility","slug":"browser-compatibility","link":"#browser-compatibility","children":[]}],"git":{"updatedTime":1751284500000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"¬ñrichardnuelofficial@gmail.com","commits":1,"url":"https://github.com/Richard-Emmanuel"},{"name":"Peacesandy","username":"Peacesandy","email":"78281826+Peacesandy@users.noreply.github.com","commits":1,"url":"https://github.com/Peacesandy"}],"changelog":[{"hash":"c48873a530ef5fa1ef90d31e0e5be6c397372698","time":1751284500000,"email":"78281826+Peacesandy@users.noreply.github.com","author":"Peace Sandy","message":"added om-array refrence (#16)"},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"¬ñrichardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"api/omArray.md"}')}}]);