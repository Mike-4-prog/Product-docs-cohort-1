"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[267],{2889:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>p,data:()=>o});var e=a(641);const t={},p=(0,a(6262).A)(t,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h1><p><code>omArray</code> is a specialised javascript object that wraps an array of numbers.</p><p>Using <code>omArray</code> is different from using a regular javascript array in the following ways:</p><ul><li><strong>Less repetition</strong>: In regular arrays, you need to write code to make calculations. In omArray, common data properties such as ‘max’, ‘min’ or ‘length’ are instantly available without needing to write code.</li><li><strong>Fewer bugs</strong>: miscalculations can occur in regular arrays because code is written manually. Using <code>omArray</code>&#39;s inbuilt functions, produces accurate calculations every time.</li><li><strong>Inbuilt functionality</strong>: With a regular array, you need to remember or look up how to do things, with <code>omArray</code>, you can explore all the inbuilt properties available.</li><li><strong>Improved readability</strong>: <code>omArray</code> is easier to read than the complex calculations in regular arrays.</li><li><strong>Added functionality</strong>: With <code>omArray</code> you can add functionality to your code without changing it. <code>omArray</code> will produce new outputs and won’t modify the original code.</li></ul><hr><h2 id="properties-in-omarray" tabindex="-1"><a class="header-anchor" href="#properties-in-omarray"><span>Properties in omArray</span></a></h2><p>Properties give you instant information about your array without having to calculate anything yourself.</p><h3 id="property-syntax" tabindex="-1"><a class="header-anchor" href="#property-syntax"><span>Property Syntax</span></a></h3><p>To access a property, you will need to use the the syntax <code>object.property</code></p><div class="hint-container note"><p class="hint-container-title">Note</p><p>To check a <strong>property</strong> in omArray, use a <strong>dot</strong> (.)</p><p>To check the length of an array, you would use: <code>numbers.length</code></p></div><hr><h3 id="basic-properties" tabindex="-1"><a class="header-anchor" href="#basic-properties"><span>Basic properties</span></a></h3><p>The basic properties of an <code>omArray</code> are listed below:</p><ul><li><code>.length</code> - how many items are in the array</li><li><code>.first</code> - first item</li><li><code>.last</code> - last item</li><li><code>.isEmpty</code> - true if no items</li></ul><h4 id="basic-properties-example" tabindex="-1"><a class="header-anchor" href="#basic-properties-example"><span>Basic Properties Example</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// How many items?</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 5</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Is it empty?</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// First and last items</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 10</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 50</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="mathematical-properties" tabindex="-1"><a class="header-anchor" href="#mathematical-properties"><span>Mathematical properties</span></a></h3><p>The mathematical properties available in omArray are the following:</p><ul><li><code>.max</code> - shows largest number</li><li><code>.min</code> - shows smallest number</li><li><code>.sum</code> - shows total of all numbers</li><li><code>.average</code> - shows mean value</li></ul><h4 id="mathematical-properties-example" tabindex="-1"><a class="header-anchor" href="#mathematical-properties-example"><span>Mathematical properties example</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> scores <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Get the total of all numbers</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 439</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Get the average</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>average<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 87.8</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Find the highest and lowest</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 96</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 78</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="data-analysis-properties" tabindex="-1"><a class="header-anchor" href="#data-analysis-properties"><span>Data Analysis Properties</span></a></h3><p>The data analysis properties available in <code>omArray</code> are the following:</p><ul><li><code>.isNumeric</code> - shows whether all data is numbers</li><li><code>.hasDuplicates</code> - shows items that appear more than once</li><li><code>.isSorted</code> - indicates whether the data is sorted</li></ul><h4 id="data-analysis-properties-example" tabindex="-1"><a class="header-anchor" href="#data-analysis-properties-example"><span>Data analysis properties example</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Check if all items are numbers</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>isNumeric<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Check if there are duplicates</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>hasDuplicates<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true (we have two 2&#39;s)</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Check if data is sorted</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>isSorted<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="methods-in-omarray" tabindex="-1"><a class="header-anchor" href="#methods-in-omarray"><span>Methods in omArray</span></a></h2><p>Methods are actions you perform on your omArray.</p><p>A method:</p><ul><li>Executes a function on your data</li><li>Returns a new omArray as an output</li><li>Transforms your data.</li></ul><div class="hint-container note"><p class="hint-container-title">Note</p><p>Methods do not modify your original data.</p></div><h3 id="methods-syntax" tabindex="-1"><a class="header-anchor" href="#methods-syntax"><span>Methods Syntax</span></a></h3><p>When using methods, use the following syntax: <code>object.method()</code></p><div class="hint-container note"><p class="hint-container-title">Note</p><p>Always use parentheses when calling a method in <code>omArray</code></p></div><p>For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">numbers<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="basic-methods" tabindex="-1"><a class="header-anchor" href="#basic-methods"><span>Basic Methods</span></a></h3><p>Some basic methods in omArray are:</p><ul><li><code>.toArray()</code>-Converts the omArray back to a regular JavaScript array.</li><li><code>.push(item)</code> - adds an item to the end of the omArray</li><li><code>.isEmpty()</code>-Checks if the omArray is empty</li></ul><h4 id="basic-methods-examples" tabindex="-1"><a class="header-anchor" href="#basic-methods-examples"><span>Basic methods examples</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Convert back to a regular array</span></span>\n<span class="line"><span class="token keyword">const</span> regularArray <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regularArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3, 4, 5]</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Add a new number to the end</span></span>\n<span class="line">numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3, 4, 5, 6]</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">//Checks if the array is empty</span></span>\n<span class="line"><span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>\n<span class="line"><span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="filter-and-transform-methods" tabindex="-1"><a class="header-anchor" href="#filter-and-transform-methods"><span>Filter and Transform Methods</span></a></h3><p>Some methods for filtering and transforming data in omArray are:</p><ul><li><code>.filter(callback)</code> - Filters elements based on a condition, returning a new omArray.</li><li><code>.map(callback)</code> - Applies a function to each element, returning a new omArray.</li></ul><h4 id="filter-and-transform-methods-examples" tabindex="-1"><a class="header-anchor" href="#filter-and-transform-methods-examples"><span>Filter and transform methods examples</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Get only even numbers (creates a new omArray)</span></span>\n<span class="line"><span class="token keyword">const</span> evenNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenNumbers<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [2, 4, 6, 8, 10]</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Double all numbers (creates a new omArray)</span></span>\n<span class="line"><span class="token keyword">const</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="chaining-methods-together" tabindex="-1"><a class="header-anchor" href="#chaining-methods-together"><span>Chaining Methods Together</span></a></h3><p>In <code>omArray</code>, you can do multiple operations in a row at once. This is called chaining.</p><h3 id="method-chaining-syntax" tabindex="-1"><a class="header-anchor" href="#method-chaining-syntax"><span>Method Chaining Syntax</span></a></h3><p>Use dots to chain methods together.</p><p>To chain 2 methods, use the syntax: <code>object.method().method()</code></p><p>To chain a property after a method, use the syntax: <code>object.method().property</code></p><h4 id="chaining-methods-example" tabindex="-1"><a class="header-anchor" href="#chaining-methods-example"><span>Chaining Methods example</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Chain methods together</span></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> numbers</span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">// omArray([6, 7, 8, 9, 10])</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>           <span class="token comment">// omArray([12, 14, 16, 18, 20])</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// omArray([12, 14, 16])</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Get property at the end of chain</span></span>\n<span class="line"><span class="token keyword">const</span> sum <span class="token operator">=</span> numbers</span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// omArray([2, 4, 6, 8, 10])</span></span>\n<span class="line">  <span class="token punctuation">.</span>sum<span class="token punctuation">;</span>                      <span class="token comment">// 30 (property, no parentheses)</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>More detailed informatin about chaining methods in omArray can be found in Chaining Operations</p></div><hr><h2 id="common-errors" tabindex="-1"><a class="header-anchor" href="#common-errors"><span>Common errors</span></a></h2><p><strong>Mistake 1: Using parentheses () on a data property</strong></p><p>Incorrect syntax</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">arr<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// ❌ Wrong - this will cause an error</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Correct syntax</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">arr<span class="token punctuation">.</span>sum    <span class="token comment">// ✅ Correct - sum is a property, no brackets</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Reasoning:</p><p>Brackets are used when performing a method on an array. When looking up a data property, you should use dots.</p><p><strong>Mistake 2: Forgetting omArray is different from regular arrays</strong></p><p>Incorrect Syntax</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// ❌ Wrong - regular array doesn&#39;t have .sum</span></span>\n<span class="line"><span class="token keyword">const</span> regularArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regularArray<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">Correct Syntax</span>\n<span class="line"><span class="token comment">// ✅ Correct - omArray has .sum</span></span>\n<span class="line"><span class="token keyword">const</span> omArr <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>omArr<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 6</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Reasoning:</p><p><code>.sum</code> is a property only available in omArray. In a regular javascript array, you need to do the calculations in order to obtain the sum of the array.</p><p><strong>Mistake 3: Expecting methods to change the original</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// ❌ Wrong assumption - filter creates a NEW omArray</span></span>\n<span class="line"><span class="token keyword">const</span> filtered <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Still [1, 2, 3]</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filtered<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [2, 3]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Remember:</p><ul><li>Properties give you information about an <code>omArray</code>. Use a dot <code>.</code> when calling a property.</li><li>Methods perform actions on an <code>omArray</code>. Use parentheses <code>()</code> when calling a method.</li><li>Most methods return new <code>omArray</code>s</li><li>You can chain methods together</li><li>Use <code>.data</code> to see the actual array content</li></ul>',81)]))}]]),o=JSON.parse('{"path":"/guide/working-with-omArray.html","title":"Working with omArray","lang":"en-US","frontmatter":{"title":"Working with omArray","description":"A guide on how to use omArray and its methods"},"headers":[{"level":2,"title":"Properties in omArray","slug":"properties-in-omarray","link":"#properties-in-omarray","children":[{"level":3,"title":"Property Syntax","slug":"property-syntax","link":"#property-syntax","children":[]},{"level":3,"title":"Basic properties","slug":"basic-properties","link":"#basic-properties","children":[]},{"level":3,"title":"Mathematical properties","slug":"mathematical-properties","link":"#mathematical-properties","children":[]},{"level":3,"title":"Data Analysis Properties","slug":"data-analysis-properties","link":"#data-analysis-properties","children":[]}]},{"level":2,"title":"Methods in omArray","slug":"methods-in-omarray","link":"#methods-in-omarray","children":[{"level":3,"title":"Methods Syntax","slug":"methods-syntax","link":"#methods-syntax","children":[]},{"level":3,"title":"Basic Methods","slug":"basic-methods","link":"#basic-methods","children":[]},{"level":3,"title":"Filter and Transform Methods","slug":"filter-and-transform-methods","link":"#filter-and-transform-methods","children":[]},{"level":3,"title":"Chaining Methods Together","slug":"chaining-methods-together","link":"#chaining-methods-together","children":[]},{"level":3,"title":"Method Chaining Syntax","slug":"method-chaining-syntax","link":"#method-chaining-syntax","children":[]}]},{"level":2,"title":"Common errors","slug":"common-errors","link":"#common-errors","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"updatedTime":1751296860000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"richardnuelofficial@gmail.com","commits":1,"url":"https://github.com/Richard-Emmanuel"},{"name":"Rianeks Cecilia","username":"","email":"rianeks@Rianekss-MacBook-Air.local","commits":3},{"name":"Michael Uzukwu","username":"","email":"uzukwuekene.michael@gmail.com","commits":1},{"name":"Riacecilia","username":"Riacecilia","email":"211316691+Riacecilia@users.noreply.github.com","commits":2,"url":"https://github.com/Riacecilia"}],"changelog":[{"hash":"1168b602da81ba456ce0226dcb42962da4364b50","time":1751296860000,"email":"211316691+Riacecilia@users.noreply.github.com","author":"Riacecilia","message":"Riacecilia workingwithomarray (#23)","coAuthors":[{"name":"Rianeks Cecilia","email":"rianeks@Rianekss-MacBook-Air.local"}]},{"hash":"895b8391eb317ffb4a600d396b8103d98ffc4292","time":1750969332000,"email":"211316691+Riacecilia@users.noreply.github.com","author":"Riacecilia","message":"added frontmatter and introduction (#7)","coAuthors":[{"name":"Rianeks Cecilia","email":"rianeks@Rianekss-MacBook-Air.local"}]},{"hash":"8477ce84d985ab8e18f18211036947beb21ae54c","time":1750860190000,"email":"uzukwuekene.michael@gmail.com","author":"Michael Uzukwu","message":"Revert &quot;test changes&quot; (#5)"},{"hash":"b29a1174cb15b80ff2fc4690765f09a8e366abc8","time":1750856157000,"email":"rianeks@Rianekss-MacBook-Air.local","author":"Rianeks Cecilia","message":"na"},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"guide/working-with-omArray.md"}')}}]);