"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[1],{5958:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>o});var e=a(641);const p={},t=(0,a(6262).A)(p,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="chaining-operations" tabindex="-1"><a class="header-anchor" href="#chaining-operations"><span>Chaining Operations</span></a></h1><p>When working with numerical operations or transforming data, developers need to perform multiple steps in a specific order. Rather than writing repetitive and nested function calls, Openmadness supports method chaining, allowing developers to call multiple methods in a single, fluent line. Chaining not only reduces the amount of code needed but also improves readability and maintains a clear flow of logic. <br>This guide demonstrates how to chain four key operations in Openmadness: <code>omArray()</code>,<code>add</code>,<code>multiply</code>and<code>reshape</code></p><hr><ol><li><h3 id="omarray-–-creating-a-matrix-from-input" tabindex="-1"><a class="header-anchor" href="#omarray-–-creating-a-matrix-from-input"><span><code>omArray()</code> – Creating a matrix from input</span></a></h3></li></ol><p>Creates a matrix-like object with the values given:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> matrix <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Output</strong>: <code>[1, 2, 3, 4]</code></p><p>You can also chain additional operations immediately after creating the matrix:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line"> <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>\n<span class="line"> <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>\n<span class="line"> <span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Output:</strong></p><p><code>[</code><code>[12, 14],</code><code>[16, 18]</code><code>]</code></p><ol start="2"><li><h3 id="add-–-adding-a-value-to-each-element" tabindex="-1"><a class="header-anchor" href="#add-–-adding-a-value-to-each-element"><span><code>add()</code> – Adding a Value to Each Element</span></a></h3></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Output:</code><code>[6, 7, 8]</code></p><p>You can also combine add() with other operations:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output: <code>[12, 14, 16]</code></p><ol start="3"><li><h3 id="multiply-–-multiplyiing-each-element" tabindex="-1"><a class="header-anchor" href="#multiply-–-multiplyiing-each-element"><span><code>multiply()</code> – Multiplyiing Each Element</span></a></h3></li></ol><p>Multiplies each element in the matrix by the provided number.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Output:</p><pre><code>`[3, 6, 9]`\n</code></pre><p>This is when its used in a chain:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Output:</strong><code>[4, 7, 10]</code></p><ol start="4"><li><h3 id="reshape-–-changing-the-matrix-dimensions" tabindex="-1"><a class="header-anchor" href="#reshape-–-changing-the-matrix-dimensions"><span><code>reshape()</code> – Changing the Matrix Dimensions</span></a></h3></li></ol><p>Reshapes a one-dimensional matrix into a multi-dimensional format.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Output:</strong></p><p><code>[ [1, 2],[3, 4]]</code></p><p>Reshape can also be used after other operations:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Output:</strong><code>[[11, 12, 13], [14, 15, 16]]</code></p><h3 id="complete-chaining-example" tabindex="-1"><a class="header-anchor" href="#complete-chaining-example"><span>Complete Chaining Example</span></a></h3><p>Let&#39;s Combine multiple operations in a single expression:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> finalResult <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Output:</strong></p><p><code>[[4, 6, 8],[10, 12, 14],[16, 18, 20]]</code></p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Be careful when chaining methods that return a primitive value, like <code>.sum()</code>, because it will break the chain.</p></div>',39)]))}]]),o=JSON.parse('{"path":"/guide/chaining-operations.html","title":"Chaining Operations","lang":"en-US","frontmatter":{"tittle":"chaining operations"},"headers":[{"level":3,"title":"Complete Chaining Example","slug":"complete-chaining-example","link":"#complete-chaining-example","children":[]}],"git":{"updatedTime":1751233586000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"richardnuelofficial@gmail.com","commits":1,"url":"https://github.com/Richard-Emmanuel"},{"name":"QueensCode","username":"QueensCode","email":"queenanthony042@gmail.com","commits":1,"url":"https://github.com/QueensCode"}],"changelog":[{"hash":"b0eb63effdc6eaec336629562bc8119dbd7447df","time":1751233586000,"email":"queenanthony042@gmail.com","author":"QueensCode","message":"Added content to the chaining-operations.MD (#11)"},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"guide/chaining-operations.md"}')}}]);