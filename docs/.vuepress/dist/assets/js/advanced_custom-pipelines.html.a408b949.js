"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[528],{6644:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>o});var p=a(641);const e={},t=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,s[0]||(s[0]=[(0,p.Fv)('<h1 id="openmadness-custom-pipelines" tabindex="-1"><a class="header-anchor" href="#openmadness-custom-pipelines"><span>OpenMadness Custom Pipelines</span></a></h1><p>A <code>pipeline</code> in openMadness is a chain of transformation functions that process data in sequential steps. It lets you chain a series of changes to an array, applying each one after the other. Each change is a self-contained function that takes an array, modifies it, and returns the new version without altering the original. This makes code more reusable and easier to manage. This document explains how to create and use a custom data transformation pipeline in openMadness (om).</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><strong>WHAT YOU&#39;LL COVER IN THIS SECTION:</strong></p><ul><li><strong>Architecture and Components of a Pipeline</strong></li><li><strong>How to create a Pipeline</strong></li><li><strong>Adding steps to the Pipeline</strong></li><li><strong>Executing the Pipeline</strong></li><li><strong>Using Built-in Transformations</strong></li><li><strong>Defining Custom Transformations</strong></li><li><strong>Machine Learning Workflow</strong></li><li><strong>Error Handling and Validation</strong></li><li><strong>Best Practices</strong></li></ul></div><h2 id="architecture-and-components-of-a-pipeline" tabindex="-1"><a class="header-anchor" href="#architecture-and-components-of-a-pipeline"><span>Architecture and Components of a Pipeline</span></a></h2><p>The <code>pipeline</code> is a sequence of modular steps, each responsible for a specific task, designed to process <code>openMadness</code> arrays. The core components include:</p><ul><li><strong>Data Ingestion:</strong> Loads data from external sources (e.g., CSV, JSON) into an openMadness array.</li><li><strong>Transformers:</strong> Apply operations like standardization, filtering, or mathematical transformations.</li><li><strong>Validators:</strong> Ensure data quality by checking for outliers or invalid values.</li><li><strong>Output Handler:</strong> Exports the processed data to a file or external system.</li><li><strong>Pipeline Manager:</strong> Manages the steps, ensuring proper data flow and error handling.</li></ul><h2 id="key-benefits-and-use-cases" tabindex="-1"><a class="header-anchor" href="#key-benefits-and-use-cases"><span>Key Benefits and Use Cases</span></a></h2><ul><li><strong>Data Preprocessing:</strong> Normalization, filtering, and feature extraction.</li><li><strong>Machine Learning:</strong> End-to-end training and evaluation.</li><li><strong>Batch Processing:</strong> Efficient handling of large datasets.</li></ul><h2 id="how-to-create-a-pipeline" tabindex="-1"><a class="header-anchor" href="#how-to-create-a-pipeline"><span>How to Create a Pipeline</span></a></h2><p>You can create a pipeline by initialization of a new instance of the <code>Pipeline</code> class. This object manages a list of transformation functions.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Pipeline <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">openmadness</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>This sets up an empty pipeline ready to accept transformation steps.</p></div><h2 id="adding-steps-to-the-pipeline" tabindex="-1"><a class="header-anchor" href="#adding-steps-to-the-pipeline"><span>Adding Steps to the Pipeline</span></a></h2><p>Each step in the pipeline is a pure function that takes in an array and returns a transformed version. You can add as many steps as needed using the <code>.addStep()</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">   pipeline</span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">// Multiply all elements by 2</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">// Subtract 1 from all elements</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">// Keep elements greater than 5</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Start from index 0 and slice through by 2 steps </span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="executing-the-pipeline" tabindex="-1"><a class="header-anchor" href="#executing-the-pipeline"><span>Executing the Pipeline</span></a></h2><p>Run the pipeline using the <code>.run(input)</code> method. This will pass the input through all the added steps in order.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipeline-breakdown" tabindex="-1"><a class="header-anchor" href="#pipeline-breakdown"><span>Pipeline Breakdown</span></a></h3><p>Let&#39;s break down the pipeline step by step with the given input [1, 5, 10, 15, 20]:</p><p><strong>Step 1: Multiply all elements by 2</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result is [2, 10, 20, 30, 40]</p><p><strong>Step 2: Subtract 1 from all elements</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result is [1, 9, 19, 29, 39]</p><p><strong>Step 3: Keep elements greater than 5</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result is [9, 19, 29, 39]</p><p><strong>Step 4: Slice through by 2 steps starting from index 0</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Result is [9, 29]</p><h3 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="#putting-it-all-together"><span>Putting it all together</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">   <span class="token keyword">import</span> <span class="token punctuation">{</span> Pipeline <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">   <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// Multiply all elements by 2</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// Subtract 1 from all elements</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">// Keep elements greater than 5</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Start from index 0 and slice through by 2 steps </span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">   <span class="token keyword">const</span> result <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [9, 29]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The final output after applying all pipeline steps is [9, 29].</p></div><h2 id="using-built-in-transformations" tabindex="-1"><a class="header-anchor" href="#using-built-in-transformations"><span>Using Built-in Transformations</span></a></h2><p><code>openMadness</code> comes with a rich set of built-in transformation functions that simplify data preprocessing and manipulation. These transformations are designed to be:</p><ul><li><strong>Composable:</strong> You can chain multiple transformations in a pipeline.</li><li><strong>Pure:</strong> They don’t mutate input arrays; instead, they return new arrays.</li><li><strong>Reusable:</strong> Many transformations are parameterized and can be used across different datasets.</li></ul><p>Built-in transformations are accessible via the <code>transforms</code> module.</p><h3 id="importing-built-in-transforms" tabindex="-1"><a class="header-anchor" href="#importing-built-in-transforms"><span>Importing Built-in Transforms</span></a></h3><p>To use the built-in functions, import the <code>transforms</code> object from the library:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">import</span> <span class="token punctuation">{</span>transforms<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openMadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="common-built-in-transformations" tabindex="-1"><a class="header-anchor" href="#common-built-in-transformations"><span>Common Built-in Transformations</span></a></h4><ol><li><code>transforms.normalize()</code>: Performs min-max normalization, scaling all values in the array to fall within the [0, 1] range.</li></ol><p><strong>Example: Normalize temperature readings for model training</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [0, 0.25, 0.5, 0.75, 1]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>transforms.standardize()</code>: Applies z-score standardization, transforming values to have a mean of 0 and standard deviation of 1.</li></ol><p><strong>Example: Prepare data for algorithms that assume standardized input, like logistic regression.</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">standardize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [-1.1619, -0.3873, 0.3873, 1.1619] (approx.)</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>transforms.scale(factor)</code>: Multiplies each value in the array by the specified <code>factor</code>.</li></ol><p><strong>Example: Convert units, such as meters to centimeters (×100).</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  onsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [100, 200, 300, 400]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>transforms.clip(min, max)</code>: Constrains all values to fall within the range <code>[min, max]</code>.</li></ol><p><strong>Example: Limit outlier values that exceed a defined threshold.</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">clip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [0, 0, 10, 15, 20]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><code>transforms.fillMissing(strategy, value)</code>: Handles missing values (<code>null</code>, <code>undefined</code>, <code>NaN</code>) using various strategies:</li></ol><ul><li><code>&quot;mean&quot;</code> – replaces missing values with mean of array.</li><li><code>&quot;constant&quot;</code> – replaces with a specific value.</li></ul><p><strong>Example: Ensure completeness of data for model input.</strong> Fill with mean</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">fillMissing</span><span class="token punctuation">(</span><span class="token string">&quot;mean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [10, 30, 30, 30, 50] (mean = 30)</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, you can fill them with a constatnt</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">fillMissing</span><span class="token punctuation">(</span><span class="token string">&quot;constant&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [10, 0, 30, o, 50]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><code>transforms.removeDuplicates()</code>: Removes all duplicate values from the array while preserving the original order.</li></ol><p><strong>Example: Avoid repeated entries in datasets that can skew results.</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [2, 4, 6, 8]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li><code>transforms.round(decimals)</code>: Rounds each value in the array to a fixed number of decimal places.</li></ol><p><strong>Example: Display or export results with fixed precision.</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.2345</span><span class="token punctuation">,</span> <span class="token number">2.3456</span><span class="token punctuation">,</span> <span class="token number">3.4567</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [1.23, 2.35, 3.46]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="composing-multiple-built-in-transforms" tabindex="-1"><a class="header-anchor" href="#composing-multiple-built-in-transforms"><span>Composing Multiple Built-in Transforms</span></a></h3><p>Built-in transformations are designed to be chained together:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [0, 33.3, 66.7, 100]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-custom-transformation" tabindex="-1"><a class="header-anchor" href="#using-custom-transformation"><span>Using Custom Transformation</span></a></h2><p>A custom transformation is a user-defined function that transforms input data in a specific way. While openMadness provides built-in transformations like normalize() or clip(), custom transformations give you the flexibility to:</p><ul><li>Apply domain-specific logic</li><li>Handle complex data manipulations</li><li>Extend your pipeline with behavior that isn’t covered by built-ins</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">function</span> <span class="token function">transformFn</span><span class="token punctuation">(</span><span class="token parameter">inputArray</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> outputArray</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>They must:</p><ul><li>Accept an array (or matrix) as input</li><li>Return a transformed array</li><li>Be pure (no side effects unless explicitly needed)</li></ul><h3 id="example-use-cases" tabindex="-1"><a class="header-anchor" href="#example-use-cases"><span>Example Use Cases</span></a></h3><ol><li><strong>Square Each Element:</strong> You&#39;re working with a numerical dataset and want to add a squared feature to each element.</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">function</span> <span class="token function">squareElements</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">   <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>squareElements<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>\n<span class="line">  <span class="token comment">// Output: [1, 4, 9, 16, 25]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Apply Thresholding (Binary Classification):</strong> Convert numerical scores into binary categories (e.g., 1 if score ≥ 0.5, else 0).</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">function</span> <span class="token function">thresholdBinary</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> threshold <span class="token operator">=</span> <span class="token number">0.5</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> threshold <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token function">makeThresholdFn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>\n<span class="line">  <span class="token comment">// Output: [0, 1, 0, 1]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Remove Outliers Based on Standard Deviation:</strong> Filter out values that are more than 2 standard deviations from the mean.</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">function</span> <span class="token function">removeOutliers</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> mean <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> std <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> std<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 100 is an outlier</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>removeOutliers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [10, 12, 13, 11]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>Tokenize Text:</strong> You&#39;re analyzing user input or natural language data and need to tokenize it (split by whitespace).</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">function</span> <span class="token function">tokenizeText</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OpenMadness is powerful&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>tokenizeText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [[&#39;hello&#39;, &#39;world&#39;], [&#39;openmadness&#39;, &#39;is&#39;, &#39;powerful&#39;]]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>Normalize Range to [-1, 1]:</strong> Scale values between -1 and 1 instead of the usual 0–1.</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">function</span> <span class="token function">normalizeToUnitRange</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>normalizeToUnitRange<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token comment">// Output: [-1, -0.5, 0, 0.5, 1]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="machine-learning-workflow" tabindex="-1"><a class="header-anchor" href="#machine-learning-workflow"><span>Machine Learning Workflow</span></a></h2><h3 id="data-ingestion" tabindex="-1"><a class="header-anchor" href="#data-ingestion"><span>Data Ingestion</span></a></h3><p>This step is responsible for loading or parsing the raw data. In most cases, this could be reading from a file, converting CSV, or pulling from an API.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  pipeline<span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>loadData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also validate in this step:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">cleanNulls</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  pipeline<span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>cleanNulls<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="data-preprocessing" tabindex="-1"><a class="header-anchor" href="#data-preprocessing"><span>Data Preprocessing</span></a></h3><p>Preprocessing transforms the raw data into a clean and consistent format ensuring data quality, consistency, and reliability before you proceed with transformations, modeling, or analysis..</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">import</span> <span class="token punctuation">{</span> transforms <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token comment">// Normalize to [0, 1]</span></span>\n<span class="line">  pipeline<span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token comment">// Clip extreme values</span></span>\n<span class="line">  pipeline<span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>transforms<span class="token punctuation">.</span><span class="token function">clip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="removing-duplicates" tabindex="-1"><a class="header-anchor" href="#removing-duplicates"><span>Removing Duplicates</span></a></h4><p>Removing duplicates is a common preprocessing step to ensure that repeated values or rows do not skew analysis, especially in statistical calculations or training machine learning models.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">import</span> <span class="token punctuation">{</span> Pipeline <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// Initial data with duplicates</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>removeDuplicates<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [2, 4, 6, 8, 10]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>Result is: [2, 4, 6, 8, 10]</p></div><h4 id="handling-missing-values" tabindex="-1"><a class="header-anchor" href="#handling-missing-values"><span>Handling Missing Values</span></a></h4><p>Missing values (e.g., <code>null</code>, <code>undefined</code>, or <code>NaN</code>) can break transformations or skew model training. You should either:</p><ul><li>Remove them</li><li>Replace them (impute) with defaults like mean or zero</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>dropMissing<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [2, 4, 6, 8]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>Result is: [2, 4, 6, 8]</p></div><h4 id="standardizing-formats" tabindex="-1"><a class="header-anchor" href="#standardizing-formats"><span>Standardizing formats</span></a></h4><p>Standardizing formats ensures that values follow a consistent type or representation. This is crucial when:</p><ul><li>You mix numbers and strings (e.g., <code>&quot;2&quot;</code> vs <code>2</code>).</li><li>You receive data from various inconsistent sources.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;08&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>standardizeToNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [2, 4, 6, 8, 10]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>Result is: [2, 4, 6, 8]</p></div><h3 id="feature-engineering" tabindex="-1"><a class="header-anchor" href="#feature-engineering"><span>Feature Engineering</span></a></h3><p>Feature engineering is the process of transforming raw data into meaningful input for models. It plays a critical role in determining the success of any machine learning pipeline, by helping models understand data better, reduce noise, and often lead to significant performance improvements.</p><p>Common Techniques for Feature Engineering include:</p><ul><li>Aggregating existing data</li><li>Applying domain logic</li><li>Encoding categorical values</li></ul><h4 id="aggregating-existing-data" tabindex="-1"><a class="header-anchor" href="#aggregating-existing-data"><span>Aggregating existing data</span></a></h4><p>Aggregation involves summarizing or combining values from multiple rows or columns into a single or smaller number of features. It’s useful when:</p><ul><li>Working with grouped data (e.g., by time, region)</li><li>Reducing dimensionality</li><li>Creating statistical summaries like mean, max, count, etc.</li></ul><p><strong>Calculate the average of tensor readings</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> readings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">average</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> mean <span class="token operator">=</span> sum <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>mean<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Return as array for pipeline compatibility</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> readings<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>average<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: [30]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="applying-domain-logic" tabindex="-1"><a class="header-anchor" href="#applying-domain-logic"><span>Applying Domain Logic</span></a></h4><p>Domain logic refers to encoding knowledge from the specific problem domain into your features. This could mean:</p><ul><li>Creating risk scores</li><li>Categorizing based on rules</li><li>Deriving conditions that models would find hard to infer directly</li></ul><p><strong>F</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">ageGroup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">age</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;Minor&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;Adult&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">   <span class="token keyword">return</span> <span class="token string">&#39;Senior&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">   <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ages<span class="token punctuation">)</span></span>\n<span class="line">   <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>ageGroup<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>\n<span class="line">  <span class="token comment">// Output: [&#39;Minor&#39;, &#39;Adult&#39;, &#39;Adult&#39;, &#39;Senior&#39;, &#39;Senior&#39;]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="encoding-categorical-values" tabindex="-1"><a class="header-anchor" href="#encoding-categorical-values"><span>Encoding Categorical Values</span></a></h4><p>Machine learning models typically require numerical inputs. Encoding converts categorical (non-numeric) data like labels, gender, or countries into numeric formats. Common techniques are:</p><ul><li>Label Encoding – map categories to integers</li><li>One-Hot Encoding – convert categories into binary vectors</li></ul><p><strong>Label Encoding of Colors</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">labelEncode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> map <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>labels<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> map<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> colors<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span>labelEncode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>\n<span class="line">  <span class="token comment">// Output: [0, 1, 2, 0, 1]</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="model-training" tabindex="-1"><a class="header-anchor" href="#model-training"><span>Model Training</span></a></h3><p>Model training is the process of training a machine learning model using the preprocessed data. This step is essential in developing a predictive model that can make accurate predictions.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">class</span> <span class="token class-name">DummyModel</span> <span class="token punctuation">{</span></span>\n<span class="line">   <span class="token function">train</span><span class="token punctuation">(</span><span class="token parameter">inputs<span class="token punctuation">,</span> targets</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>coefficient <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span> <span class="token comment">// Mock logic</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DummyModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  pipeline<span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">inputs</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Example target values</span></span>\n<span class="line">     model<span class="token punctuation">.</span><span class="token function">train</span><span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">     <span class="token keyword">return</span> inputs<span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>coefficient<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 0.5</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="model-evaluation" tabindex="-1"><a class="header-anchor" href="#model-evaluation"><span>Model Evaluation</span></a></h3><p>Model evaluation is the process of assessing the performance of the trained model. This step is crucial in determining the model&#39;s accuracy and reliability. Evaluation computes metrics like accuracy, Mean Squared Error (MSE), etc., and optionally logs or returns them.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  pipeline<span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">inputs</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">   <span class="token keyword">const</span> predictions <span class="token operator">=</span> inputs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> model<span class="token punctuation">.</span>coefficient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">   <span class="token keyword">const</span> labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> mse <span class="token operator">=</span> labels<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> actual<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> error <span class="token operator">=</span> predictions<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> actual<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> sum <span class="token operator">+</span> error <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> labels<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Mean Squared Error:&#39;</span><span class="token punctuation">,</span> mse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token keyword">return</span> inputs<span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="model-deployment" tabindex="-1"><a class="header-anchor" href="#model-deployment"><span>Model Deployment</span></a></h3><p>Model deployment is the process of deploying the trained model in a production environment. This step is essential in making the model available for use in real-world applications. Deployment may involve exporting the model, serializing weights, or making predictions live.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  pipeline<span class="token punctuation">.</span><span class="token function">addStep</span><span class="token punctuation">(</span><span class="token parameter">inputs</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> predictions <span class="token operator">=</span> inputs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> model<span class="token punctuation">.</span>coefficient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Deployed Predictions:&#39;</span><span class="token punctuation">,</span> predictions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> predictions<span class="token punctuation">;</span></span>\n<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>You could also store the model in a database or write to a file, depending on your app environment.</p></div>',139)]))}]]),o=JSON.parse('{"path":"/advanced/custom-pipelines.html","title":"OpenMadness Custom Pipelines","lang":"en-US","frontmatter":{"title":"OpenMadness Custom Pipelines","description":null},"headers":[{"level":2,"title":"Architecture and Components of a Pipeline","slug":"architecture-and-components-of-a-pipeline","link":"#architecture-and-components-of-a-pipeline","children":[]},{"level":2,"title":"Key Benefits and Use Cases","slug":"key-benefits-and-use-cases","link":"#key-benefits-and-use-cases","children":[]},{"level":2,"title":"How to Create a Pipeline","slug":"how-to-create-a-pipeline","link":"#how-to-create-a-pipeline","children":[]},{"level":2,"title":"Adding Steps to the Pipeline","slug":"adding-steps-to-the-pipeline","link":"#adding-steps-to-the-pipeline","children":[]},{"level":2,"title":"Executing the Pipeline","slug":"executing-the-pipeline","link":"#executing-the-pipeline","children":[{"level":3,"title":"Pipeline Breakdown","slug":"pipeline-breakdown","link":"#pipeline-breakdown","children":[]},{"level":3,"title":"Putting it all together","slug":"putting-it-all-together","link":"#putting-it-all-together","children":[]}]},{"level":2,"title":"Using Built-in Transformations","slug":"using-built-in-transformations","link":"#using-built-in-transformations","children":[{"level":3,"title":"Importing Built-in Transforms","slug":"importing-built-in-transforms","link":"#importing-built-in-transforms","children":[]},{"level":3,"title":"Composing Multiple Built-in Transforms","slug":"composing-multiple-built-in-transforms","link":"#composing-multiple-built-in-transforms","children":[]}]},{"level":2,"title":"Using Custom Transformation","slug":"using-custom-transformation","link":"#using-custom-transformation","children":[{"level":3,"title":"Example Use Cases","slug":"example-use-cases","link":"#example-use-cases","children":[]}]},{"level":2,"title":"Machine Learning Workflow","slug":"machine-learning-workflow","link":"#machine-learning-workflow","children":[{"level":3,"title":"Data Ingestion","slug":"data-ingestion","link":"#data-ingestion","children":[]},{"level":3,"title":"Data Preprocessing","slug":"data-preprocessing","link":"#data-preprocessing","children":[]},{"level":3,"title":"Feature Engineering","slug":"feature-engineering","link":"#feature-engineering","children":[]},{"level":3,"title":"Model Training","slug":"model-training","link":"#model-training","children":[]},{"level":3,"title":"Model Evaluation","slug":"model-evaluation","link":"#model-evaluation","children":[]},{"level":3,"title":"Model Deployment","slug":"model-deployment","link":"#model-deployment","children":[]}]}],"git":{"updatedTime":1751615833000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"richardnuelofficial@gmail.com","commits":1,"url":"https://github.com/Richard-Emmanuel"},{"name":"Fsquared123","username":"Fsquared123","email":"71792380+Fsquared123@users.noreply.github.com","commits":2,"url":"https://github.com/Fsquared123"}],"changelog":[{"hash":"2ce2084abe08a7f7bf2b7f0f2dec7e793f8473ad","time":1751615833000,"email":"71792380+Fsquared123@users.noreply.github.com","author":"Fsquared123","message":"Contribute.md Page content (#34)"},{"hash":"534ec93f6d8781da2bca61fdbd303fcd5ccc45e7","time":1751290890000,"email":"71792380+Fsquared123@users.noreply.github.com","author":"Fsquared123","message":"Updated custom pipeline content (#18)"},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"advanced/custom-pipelines.md"}')}}]);