"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[206],{7667:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>i});var e=a(641);const p={},t=(0,a(6262).A)(p,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h2 id="performance-tips" tabindex="-1"><a class="header-anchor" href="#performance-tips"><span>Performance Tips</span></a></h2><p>Openmadness is designed to be fast, but when working with large datasets, every optimization counts! Here are some pro tips to squeeze maximum performance out of your array operations.</p><h3 id="vectorize-your-operations" tabindex="-1"><a class="header-anchor" href="#vectorize-your-operations"><span>Vectorize Your Operations</span></a></h3><p>Always prefer built-in vectorized operations over loops:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">//  Slow way (avoid!)</span></span>\n<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bigArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bigArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">//  Fast way (vectorized)</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> multiply <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>bigArray<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Why it matters</p><p>Vectorized operations use optimized C++ under the hood and avoid JavaScript&#39;s loop overhead.</p></div><h3 id="chain-operations-with-pipelines" tabindex="-1"><a class="header-anchor" href="#chain-operations-with-pipelines"><span>Chain Operations with Pipelines</span></a></h3><p>Combine multiple operations into a single pipeline to minimize intermediate arrays:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> pipe<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> multiply<span class="token punctuation">,</span> sum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Good</span></span>\n<span class="line"><span class="token keyword">const</span> processData <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span></span>\n<span class="line">  <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">  sum</span>\n<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-typed-arrays-for-numeric-data" tabindex="-1"><a class="header-anchor" href="#use-typed-arrays-for-numeric-data"><span>Use Typed Arrays for Numeric Data</span></a></h3><p>For pure numeric arrays, use JavaScript&#39;s <code>TypedArrays</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Before</span></span>\n<span class="line"><span class="token keyword">const</span> regularArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// After (3â€“5x faster for numeric operations)</span></span>\n<span class="line"><span class="token keyword">const</span> typedArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// OpenMadness works with both!</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="memory-management-tips" tabindex="-1"><a class="header-anchor" href="#memory-management-tips"><span>Memory Management Tips</span></a></h3><p>A. Reuse Arrays When Possible:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Instead of creating new arrays constantly:</span></span>\n<span class="line"><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">operation1</span><span class="token punctuation">(</span>bigArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">temp <span class="token operator">=</span> <span class="token function">operation2</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Consider mutating when safe:</span></span>\n<span class="line"><span class="token function">operation1InPlace</span><span class="token punctuation">(</span>bigArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Modifies original</span></span>\n<span class="line"><span class="token function">operation2InPlace</span><span class="token punctuation">(</span>bigArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>B. Watch for Memory Leaks:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// When processing large batches:</span></span>\n<span class="line"><span class="token keyword">function</span> <span class="token function">processBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">getGiantArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment">// Only keep what you need!</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parallel-processing-experimental" tabindex="-1"><a class="header-anchor" href="#parallel-processing-experimental"><span>Parallel Processing (Experimental)</span></a></h3><p>For CPU-bound tasks, consider using <strong>Web Workers</strong>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// main.js</span></span>\n<span class="line"><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;process.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>bigData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// process.js</span></span>\n<span class="line"><span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">&#39;openmadness.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> openmadness<span class="token punctuation">.</span><span class="token function">heavyOperation</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="benchmarking-your-code" tabindex="-1"><a class="header-anchor" href="#benchmarking-your-code"><span>Benchmarking Your Code</span></a></h3><p>Always measure before optimizing:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;operation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">expensiveOperation</span><span class="token punctuation">(</span>bigData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;operation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Shows execution time</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="when-to-optimize" tabindex="-1"><a class="header-anchor" href="#when-to-optimize"><span>When to Optimize?</span></a></h3><div class="hint-container warning"><p class="hint-container-title">Don&#39;t prematurely optimize!</p><p>Avoid optimizing small arrays (&lt;10,000 elements). Focus your efforts where it counts.</p></div><p>Do optimize when:</p><ul><li><p>Operations take &gt;100ms</p></li><li><p>You&#39;re processing frames in animation</p></li><li><p>You&#39;re working on scientific/data applications</p></li></ul><h3 id="further-reading" tabindex="-1"><a class="header-anchor" href="#further-reading"><span>Further Reading</span></a></h3><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays" target="_blank" rel="noopener noreferrer">MDN TypedArrays Guide</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" target="_blank" rel="noopener noreferrer">Web Workers API</a></p></li><li><p><a href="/guides/performance-cookbook">OpenMadness Performance Cookbook</a></p></li></ul><div class="hint-container tip"><p class="hint-container-title">Final Thought</p><p>Write code first, optimize later â€” but only where it counts!</p></div>',31)]))}]]),i=JSON.parse('{"path":"/advanced/performance-tips.html","title":"Performance Tips for OpenMadness","lang":"en-US","frontmatter":{"title":"Performance Tips for OpenMadness","description":"Pro tips for writing high-performance array operations using OpenMadness"},"headers":[{"level":2,"title":"Performance Tips","slug":"performance-tips","link":"#performance-tips","children":[{"level":3,"title":"Vectorize Your Operations","slug":"vectorize-your-operations","link":"#vectorize-your-operations","children":[]},{"level":3,"title":"Chain Operations with Pipelines","slug":"chain-operations-with-pipelines","link":"#chain-operations-with-pipelines","children":[]},{"level":3,"title":"Use Typed Arrays for Numeric Data","slug":"use-typed-arrays-for-numeric-data","link":"#use-typed-arrays-for-numeric-data","children":[]},{"level":3,"title":"Memory Management Tips","slug":"memory-management-tips","link":"#memory-management-tips","children":[]},{"level":3,"title":"Parallel Processing (Experimental)","slug":"parallel-processing-experimental","link":"#parallel-processing-experimental","children":[]},{"level":3,"title":"Benchmarking Your Code","slug":"benchmarking-your-code","link":"#benchmarking-your-code","children":[]},{"level":3,"title":"When to Optimize?","slug":"when-to-optimize","link":"#when-to-optimize","children":[]},{"level":3,"title":"Further Reading","slug":"further-reading","link":"#further-reading","children":[]}]}],"git":{"updatedTime":1751615753000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"Â–richardnuelofficial@gmail.com","commits":2,"url":"https://github.com/Richard-Emmanuel"},{"name":"Michael Uzukwu","username":"","email":"uzukwuekene.michael@gmail.com","commits":1}],"changelog":[{"hash":"bf94eca0bf90afba68875c2dd836cbca93395ea7","time":1751615753000,"email":"uzukwuekene.michael@gmail.com","author":"Michael Uzukwu","message":"Mikedocs (#33)","coAuthors":[{"name":"Richard Emmanuel","email":"104577891+Richard-Emmanuel@users.noreply.github.com"}]},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"Â–richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"advanced/performance-tips.md"}')}}]);