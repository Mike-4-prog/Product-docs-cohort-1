"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[316],{2993:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>i,data:()=>p});var e=a(641);const t={},i=(0,a(6262).A)(t,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h2 id="testing-locally-–-setting-up-a-dev-testing-environment" tabindex="-1"><a class="header-anchor" href="#testing-locally-–-setting-up-a-dev-testing-environment"><span>Testing Locally – Setting Up a Dev/Testing Environment</span></a></h2><p>Before making your first contribution or testing a new feature in OpenMadness, it&#39;s important to set up your local environment properly. In this guide, we will walk you through the process of getting everything ready, running the project locally, and making sure your changes don&#39;t break anything.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This guide assumes you are a bit familiar with using the terminal and installing software on your computer. Don’t worry, we will keep things beginner-friendly!</p></div><h3 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h3><p>Before you begin, make sure you have the following installed:</p><ul><li><strong><a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer">Git</a></strong></li><li><strong><a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">Node.js</a></strong> (v18 or higher recommended)</li><li><strong><a href="https://yarnpkg.com/getting-started/install" target="_blank" rel="noopener noreferrer">Yarn</a></strong> (we use Yarn instead of npm)</li><li><strong>A code editor</strong>, like <a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">VS Code</a></li><li><strong>A modern browser</strong>, like Chrome or Firefox</li></ul><p>You can check if you have these tools installed by running:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token parameter variable">--version</span></span>\n<span class="line"><span class="token function">node</span> <span class="token parameter variable">-v</span></span>\n<span class="line"><span class="token function">yarn</span> <span class="token parameter variable">-v</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you see version numbers as output, you are good to go!</p><h3 id="cloning-the-project" tabindex="-1"><a class="header-anchor" href="#cloning-the-project"><span>Cloning the Project</span></a></h3><p>Let’s start by downloading the OpenMadness project to your machine:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/openmadness/Product-docs-cohort-1.git</span>\n<span class="line"><span class="token builtin class-name">cd</span> Product-docs-cohort-1</span>\n<span class="line">`<span class="token variable"><span class="token variable">`</span></span>\n<span class="line">::: tip</span>\n<span class="line">If you are working <span class="token keyword">in</span> a team or on a specific feature, <span class="token function">make</span> sure you are on the correct branch:</span>\n<span class="line">:::</span>\n<span class="line"></span>\n<span class="line"><span class="token variable">`</span></span>``bash</span>\n<span class="line"><span class="token function">git</span> checkout your-feature-branch</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setting-up-a-local-test-environment" tabindex="-1"><a class="header-anchor" href="#setting-up-a-local-test-environment"><span>Setting Up a Local Test Environment</span></a></h3><h4 id="initialize-a-node-js-project" tabindex="-1"><a class="header-anchor" href="#initialize-a-node-js-project"><span>Initialize a Node.js Project</span></a></h4><p>Create a new folder and run:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="install-openmadness" tabindex="-1"><a class="header-anchor" href="#install-openmadness"><span>Install OpenMadness</span></a></h4><p>Install openmadness via:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> openmadness-array --save-dev</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="create-a-test-file" tabindex="-1"><a class="header-anchor" href="#create-a-test-file"><span>Create a Test File</span></a></h4><p>Make a test.js file and import OpenMadness:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> OMArray <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;openmadness-array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="writing-tests-for-openmadness-arrays" tabindex="-1"><a class="header-anchor" href="#writing-tests-for-openmadness-arrays"><span>Writing Tests for OpenMadness Arrays</span></a></h3><h4 id="example-1-basic-array-operations" tabindex="-1"><a class="header-anchor" href="#example-1-basic-array-operations"><span>Example 1: Basic Array Operations</span></a></h4><p>Let us start by test-creating and manipulating an OpenMadness array:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Create an OpenMadness array</span></span>\n<span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OMArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Test sum operation</span></span>\n<span class="line"><span class="token keyword">const</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hypothetical method</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum <span class="token operator">===</span> <span class="token number">15</span> <span class="token operator">?</span> <span class="token string">&quot;✅ Sum test passed!&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;❌ Sum test failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-2-matrix-operations" tabindex="-1"><a class="header-anchor" href="#example-2-matrix-operations"><span>Example 2: Matrix Operations</span></a></h4><p>OpenMadness supports matrix multiplication:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> matrixA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OMArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> matrixB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OMArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> matrixA<span class="token punctuation">.</span><span class="token function">matMul</span><span class="token punctuation">(</span>matrixB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hypothetical method</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should log [[19, 22], [43, 50]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Use console.assert() for better test feedback:</p></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;❌ Matrix multiplication failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="running-tests" tabindex="-1"><a class="header-anchor" href="#running-tests"><span>Running Tests</span></a></h3><p>Execute your test file with Node.js:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">node</span> test.js</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For better testing, consider using a test runner like:</p><ul><li><a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">Jest</a></li><li><a href="https://mochajs.org/" target="_blank" rel="noopener noreferrer">Mocha</a></li></ul><p>Example with Jest: Install Jest:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev jest</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Write a test:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;OMArray sum works correctly&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OMArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run tests:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">npx jest</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="further-reading" tabindex="-1"><a class="header-anchor" href="#further-reading"><span>Further Reading</span></a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreferrer">JavaScript Array Documentation (MDN)</a></li><li><a href="https://jestjs.io/docs/getting-started" target="_blank" rel="noopener noreferrer">Jest Testing Bascis</a></li></ul><p>Testing locally ensures your OpenMadness array operations work correctly before moving to production. Try different methods, edge cases, and integrate a test framework for smoother workflows!</p><p>Happy testing! 🚀</p>',46)]))}]]),p=JSON.parse('{"path":"/guide/testing-locally.html","title":"Testing Locally – Setting Up a Dev/Testing Environment","lang":"en-US","frontmatter":{"title":"Testing Locally – Setting Up a Dev/Testing Environment"},"headers":[{"level":2,"title":"Testing Locally – Setting Up a Dev/Testing Environment","slug":"testing-locally-–-setting-up-a-dev-testing-environment","link":"#testing-locally-–-setting-up-a-dev-testing-environment","children":[{"level":3,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":3,"title":"Cloning the Project","slug":"cloning-the-project","link":"#cloning-the-project","children":[]},{"level":3,"title":"Setting Up a Local Test Environment","slug":"setting-up-a-local-test-environment","link":"#setting-up-a-local-test-environment","children":[]},{"level":3,"title":"Writing Tests for OpenMadness Arrays","slug":"writing-tests-for-openmadness-arrays","link":"#writing-tests-for-openmadness-arrays","children":[]},{"level":3,"title":"Running Tests","slug":"running-tests","link":"#running-tests","children":[]},{"level":3,"title":"Further Reading","slug":"further-reading","link":"#further-reading","children":[]}]}],"git":{"updatedTime":1751405741000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"richardnuelofficial@gmail.com","commits":1,"url":"https://github.com/Richard-Emmanuel"},{"name":"Michael Uzukwu","username":"","email":"uzukwuekene.michael@gmail.com","commits":3}],"changelog":[{"hash":"be12b85fcc6ee1add88c06c315b42943fb8d60d1","time":1751405741000,"email":"uzukwuekene.michael@gmail.com","author":"Michael Uzukwu","message":"Mikedocs (#31)"},{"hash":"d46d405d8085a084678b2f6471706e6b014a579c","time":1751288184000,"email":"uzukwuekene.michael@gmail.com","author":"Michael Uzukwu","message":"Mikedocs (#17)"},{"hash":"563ba2c44da7420a31f81e39db63a886966b403a","time":1751018111000,"email":"uzukwuekene.michael@gmail.com","author":"Michael Uzukwu","message":"Updated fix for Testing locally (#10)"},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"guide/testing-locally.md"}')}}]);