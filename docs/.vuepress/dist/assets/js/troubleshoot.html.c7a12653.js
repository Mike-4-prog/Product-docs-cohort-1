"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[482],{8699:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>p,data:()=>o});var e=a(641);const t={},p=(0,a(6262).A)(t,[["render",function(s,n){const a=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[n[2]||(n[2]=(0,e.Fv)('<h2 id="troubleshooting-openmadness" tabindex="-1"><a class="header-anchor" href="#troubleshooting-openmadness"><span>Troubleshooting OpenMadness</span></a></h2><p>Even the best libraries can run into rough patches — and OpenMadness is no exception. Whether you are hitting import errors, struggling with pipeline logic, or seeing unexpected results, this guide walks you through practical solutions to the most common problems.</p><p>Let’s get you back to smooth coding.</p><h3 id="common-issues-and-solutions" tabindex="-1"><a class="header-anchor" href="#common-issues-and-solutions"><span>Common Issues and Solutions</span></a></h3><ol><li>&quot;Function is not defined&quot; Errors <strong>Problem</strong>: You see <code>ReferenceError: sum is not defined</code></li></ol><p>Solution: Check your imports!</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// ✅ Correct</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// ❌ Wrong (common mistake)</span></span>\n<span class="line"><span class="token keyword">import</span> sum <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Missing curly braces!</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><strong>Remember:</strong> OpenMadness uses <strong>named exports</strong> for all functions.</p></div><ol start="2"><li>Unexpected NaN Values</li></ol><p><strong>Problem</strong>: Operations return <code>NaN</code> unexpectedly</p><p><strong>Checklist</strong>:</p><ol><li>Verify your input data:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yourArray<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isNaN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Check for NaN values</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>Handle empty arrays:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> safeDivide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token function">safeDivide</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 0, 1.5]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-bottlenecks" tabindex="-1"><a class="header-anchor" href="#performance-bottlenecks"><span>Performance Bottlenecks</span></a></h3><p>Signs:</p><ul><li><p>Operations feel slow</p></li><li><p>Browser freezes with large arrays</p></li></ul><p>Optimization Tips:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Before (slow for big arrays)</span></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> hugeArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token function">complexCalculation</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// After (faster)</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> vectorize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> fastCalculation <span class="token operator">=</span> <span class="token function">vectorize</span><span class="token punctuation">(</span>complexCalculation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fastCalculation</span><span class="token punctuation">(</span>hugeArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="debugging-pipelines" tabindex="-1"><a class="header-anchor" href="#debugging-pipelines"><span>Debugging Pipelines</span></a></h3><p>Using the <code>log()</code> Helper</p><p>Trace pipeline steps easily:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> pipe<span class="token punctuation">,</span> log<span class="token punctuation">,</span> multiply<span class="token punctuation">,</span> filter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token function">pipe</span><span class="token punctuation">(</span></span>\n<span class="line">  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Input:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;After multiply:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Final result:&#39;</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="visualizing-array-shapes" tabindex="-1"><a class="header-anchor" href="#visualizing-array-shapes"><span>Visualizing Array Shapes</span></a></h3><p>When working with multi-dimensional arrays:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> shape <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shape</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 2]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="error-messages-decoded" tabindex="-1"><a class="header-anchor" href="#error-messages-decoded"><span>Error Messages Decoded</span></a></h3><table><thead><tr><th><strong>Error</strong></th><th><strong>Likely Cause</strong></th><th><strong>Fix</strong></th></tr></thead><tbody><tr><td><code>Invalid dimensions</code></td><td>Array shapes don&#39;t match</td><td>Check with <code>shape()</code></td></tr><tr><td><code>Cannot read property</code></td><td>Trying to use non-array input</td><td>Add type check: <code>Array.isArray(input)</code></td></tr><tr><td><code>Maximum call stack</code></td><td>Recursive operation gone wild</td><td>Use iterative approach instead</td></tr></tbody></table><h3 id="browser-specific-issues" tabindex="-1"><a class="header-anchor" href="#browser-specific-issues"><span>Browser-Specific Issues</span></a></h3><p><strong>Webpack Configuration</strong></p><p>If you see bundler errors, try adding to your webpack.config.js:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token string-property property">&quot;buffer&quot;</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;buffer/&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cdn-usage" tabindex="-1"><a class="header-anchor" href="#cdn-usage"><span>CDN Usage</span></a></h3><p>When loading from CDN:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token comment">&lt;!-- Check the global variable name --&gt;</span></span>\n<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/openmadness<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>\n<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>OpenMadness<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Note PascalCase</span></span>\n<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="still-stuck-try-this" tabindex="-1"><a class="header-anchor" href="#still-stuck-try-this"><span>Still Stuck? Try This!</span></a></h3><ol><li>Isolate the Problem:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Create minimal test case</span></span>\n<span class="line"><span class="token keyword">const</span> testInput <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Simplest possible input</span></span>\n<span class="line"><span class="token keyword">const</span> testOutput <span class="token operator">=</span> <span class="token function">problematicFunction</span><span class="token punctuation">(</span>testInput<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><h4 id="check-the-docs" tabindex="-1"><a class="header-anchor" href="#check-the-docs"><span>Check the Docs:</span></a></h4></li></ol>',40)),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"/reference/"},{default:(0,e.k6)(()=>n[0]||(n[0]=[(0,e.eW)("API Reference")])),_:1,__:[0]})]),(0,e.Lk)("li",null,[(0,e.bF)(a,{to:"/examples/"},{default:(0,e.k6)(()=>n[1]||(n[1]=[(0,e.eW)("Examples Gallery")])),_:1,__:[1]})])]),n[3]||(n[3]=(0,e.Fv)('<ol start="3"><li><h4 id="ask-the-community" tabindex="-1"><a class="header-anchor" href="#ask-the-community"><span>Ask the Community:</span></a></h4></li></ol><ul><li><a href="https://github.com/openmadness/openmadness/discussions" target="_blank" rel="noopener noreferrer">GitHub Discussions</a></li><li><a href="https://stackoverflow.com/questions/tagged/openmadness" target="_blank" rel="noopener noreferrer">Stack Overflow</a></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>When asking for help, include:</p><ul><li><p>OpenMadness version (npm list openmadness)</p></li><li><p>Minimal reproducible example</p></li><li><p>Expected vs. actual output</p></li></ul></div><p><strong>Remember</strong>: Every bug you solve makes you a better developer! Happy debugging!</p>',4))])}]]),o=JSON.parse('{"path":"/troubleshoot.html","title":"Troubleshooting OpenMadness","lang":"en-US","frontmatter":{"title":"Troubleshooting OpenMadness","description":"Diagnose and fix common issues when using OpenMadness for array operations, from import errors to unexpected pipeline behavior."},"headers":[{"level":2,"title":"Troubleshooting OpenMadness","slug":"troubleshooting-openmadness","link":"#troubleshooting-openmadness","children":[{"level":3,"title":"Common Issues and Solutions","slug":"common-issues-and-solutions","link":"#common-issues-and-solutions","children":[]},{"level":3,"title":"Performance Bottlenecks","slug":"performance-bottlenecks","link":"#performance-bottlenecks","children":[]},{"level":3,"title":"Debugging Pipelines","slug":"debugging-pipelines","link":"#debugging-pipelines","children":[]},{"level":3,"title":"Visualizing Array Shapes","slug":"visualizing-array-shapes","link":"#visualizing-array-shapes","children":[]},{"level":3,"title":"Error Messages Decoded","slug":"error-messages-decoded","link":"#error-messages-decoded","children":[]},{"level":3,"title":"Browser-Specific Issues","slug":"browser-specific-issues","link":"#browser-specific-issues","children":[]},{"level":3,"title":"CDN Usage","slug":"cdn-usage","link":"#cdn-usage","children":[]},{"level":3,"title":"Still Stuck? Try This!","slug":"still-stuck-try-this","link":"#still-stuck-try-this","children":[]}]}],"git":{"updatedTime":1751615753000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"richardnuelofficial@gmail.com","commits":5,"url":"https://github.com/Richard-Emmanuel"},{"name":"Michael Uzukwu","username":"","email":"uzukwuekene.michael@gmail.com","commits":1}],"changelog":[{"hash":"bf94eca0bf90afba68875c2dd836cbca93395ea7","time":1751615753000,"email":"uzukwuekene.michael@gmail.com","author":"Michael Uzukwu","message":"Mikedocs (#33)","coAuthors":[{"name":"Richard Emmanuel","email":"104577891+Richard-Emmanuel@users.noreply.github.com"}]},{"hash":"27fcfb9da61981457bbabe85830edc61e3796f9b","time":1751292374000,"email":"104577891+Richard-Emmanuel@users.noreply.github.com","author":"Richard Emmanuel","message":"Docs/richard (#22)","coAuthors":[{"name":"Richard-Emmanuel","email":"richardnuelofficial@gmail.com"}]},{"hash":"9c012aafa906fd1248412ed5ea72964e60032898","time":1751292006000,"email":"richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"add content for troubleshooting page"},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"troubleshoot.md"}')}}]);