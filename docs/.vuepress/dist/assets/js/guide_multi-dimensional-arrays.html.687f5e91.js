"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[875],{7128:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>p,data:()=>i});var e=a(641);const t={},p=(0,a(6262).A)(t,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="multi-dimensional-arrays" tabindex="-1"><a class="header-anchor" href="#multi-dimensional-arrays"><span>Multi-Dimensional Arrays</span></a></h1><p>Multi-dimensional arrays in <strong>Openmadness</strong> represent nested JavaScript arrays—often visualized as matrices or higher-dimensional tensors. Simply put, a multidimensional array in JavaScript is an array that has other arrays as its elements.</p><blockquote><p><strong>Note:</strong> Multi-dimensional arrays are essential for handling complex data structures, especially when working with grids, tables, or matrices.</p></blockquote><p>This guide would walk you through how to effectively use and manipulate multi-dimensional arrays using Openmadness’s clean, intuitive methods.</p><h2 id="example-of-a-multi-dimensional-array" tabindex="-1"><a class="header-anchor" href="#example-of-a-multi-dimensional-array"><span>Example of a Multi-Dimensional Array?</span></a></h2><p>A multi-dimensional array is essentially an array of arrays. Here is a simple example of a multidimensional array. Example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// multidimensional array</span></span>\n<span class="line"><span class="token comment">// contains 3 separate arrays as elements</span></span>\n<span class="line"><span class="token keyword">const</span> dataSet <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Details</summary><p>Here, we created a multidimensional array named data with the following arrays as its elements: [1, 2, 3], [4, 5, 6], [7, 8, 9].</p></details><h2 id="using-existing-arrays-as-elements" tabindex="-1"><a class="header-anchor" href="#using-existing-arrays-as-elements"><span>Using Existing Arrays as Elements</span></a></h2><p>We can also create multidimensional arrays by nesting existing arrays within them. Example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// three predefined arrays</span></span>\n<span class="line"><span class="token keyword">const</span> userA <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> userB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> userC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Clara&#39;</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// create the multidimensional array</span></span>\n<span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>userA<span class="token punctuation">,</span> userB<span class="token punctuation">,</span> userC<span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// Output: [[&#39;Alice&#39;, 30], [&#39;Bob&#39;, 28], [&#39;Clara&#39;, 27]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Details</summary><p>Here, we has three exisiting arrays: userA, userB and userC and then we nested them within the users array to create our multidimensional array.</p></details><h2 id="accessing-elements-of-an-array" tabindex="-1"><a class="header-anchor" href="#accessing-elements-of-an-array"><span>Accessing Elements of an Array</span></a></h2><p>You can access the elements of a multidimensional array using array indexes. It follows the pattern of rows and columns in a spreadsheet. Example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> records <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token punctuation">[</span><span class="token string">&#39;Clara&#39;</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// access the first record item</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [&#39;Alice&#39;, 30]</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// access the first item of the first array in the records</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;Alice&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// access the second item of the last array in the records</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 27</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Details</summary><p>You can think of a multidimensional array (in this case, <strong>records</strong>), as a table with 3 rows and 2 columns.</p></details><h2 id="iterating-over-multidimensional-array" tabindex="-1"><a class="header-anchor" href="#iterating-over-multidimensional-array"><span>Iterating Over Multidimensional Array</span></a></h2><p>In JavaScript, you can use nested loops to go through a multidimensional array: one loop for the outer array and another loop inside it for the inner arrays. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-foreach-to-iterate-over-multidimensional-array" tabindex="-1"><a class="header-anchor" href="#use-foreach-to-iterate-over-multidimensional-array"><span>Use forEach() to Iterate Over Multidimensional Array</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">  user<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">detail</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Be careful with index boundaries! Accessing an index outside the array&#39;s length will result in <code>undefined</code>.</p></div><h3 id="use-cases" tabindex="-1"><a class="header-anchor" href="#use-cases"><span>Use Cases</span></a></h3><ul><li>Representing grids or game boards</li><li>Storing tabular data</li><li>Image processing (pixels in rows and columns)</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Multi-dimensional arrays are widely used in games (like chess boards), spreadsheets, and scientific computing.</p></div><h2 id="adding-elements-to-a-multidimensional-array" tabindex="-1"><a class="header-anchor" href="#adding-elements-to-a-multidimensional-array"><span>Adding Elements to a Multidimensional Array</span></a></h2><p>You can either use an index notation or the push() method to add elements to a multidimensional array.</p><ol><li>Using Index Notation</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> workers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// add &quot;Present&quot; as a third element</span></span>\n<span class="line">workers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Present&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>workers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Output: [[&#39;Tom&#39;, 22], [&#39;Jane&#39;, 21, &#39;Present&#39;]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Using the push() Method The push() method inserts an element at the end of the array. Example:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> workers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// add array [‘David’, 23] to the end of the workers array</span></span>\n<span class="line">workers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;David&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// add element “Enrolled”  to the end of the first array in the workers array</span></span>\n<span class="line">workers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Enrolled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>workers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token comment">// [[&#39;Tom&#39;, 22, &#39;Enrolled&#39;], [&#39;Jane&#39;, 21], [&#39;David&#39;, 23]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="removing-elements-from-a-multidimensional-array" tabindex="-1"><a class="header-anchor" href="#removing-elements-from-a-multidimensional-array"><span>Removing Elements From a Multidimensional Array</span></a></h2><p>You can either use the splice() method or the pop() method to remove an element from any position in the multidimensional array.</p><ol><li>Using the splice method</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Output: [[&#39;Jane&#39;, 21]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>In the above program, data.splice(0,1) removes the first element of the multidimensional array. Here, 0 - The start index from where to modify the array. 1 - The number of elements to delete. If you want to delete both arrays, you can use the code studentsData.splice(0,2).</p></div><ol start="2"><li>Remove the last element using the pop() method.</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// Output: [[&#39;Tom&#39;, 22]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="higher-dimensions" tabindex="-1"><a class="header-anchor" href="#higher-dimensions"><span>Higher Dimensions</span></a></h3><p>You can create arrays with more than two dimensions:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 3D array example</span></span>\n<span class="line"><span class="token keyword">const</span> cube <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line">    <span class="token punctuation">[</span></span>\n<span class="line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">[</span></span>\n<span class="line">        <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>How to visualize higher dimensions?</summary><p>A 3D array can be thought of as a collection of 2D matrices stacked together.</p></details><h2 id="some-core-transformations" tabindex="-1"><a class="header-anchor" href="#some-core-transformations"><span>Some Core Transformations</span></a></h2><table><thead><tr><th>Operation</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>.flatten()</code></td><td>Convert any <code>omArray</code> into a 1D array</td><td><code>omArray([[1,2],[3,4]]).flatten()</code> → <code>[1,2,3,4]</code></td></tr><tr><td><code>.reshape(shape)</code></td><td>Reorganize elements into a new shape (row-major by default)</td><td><code>omArray([1,2,3,4]).reshape([2,2])</code> → <code>[[1,2],[3,4]]</code></td></tr><tr><td><code>.transpose()</code></td><td>Swap axes—commonly convert rows into columns for 2D matrices</td><td><code>omArray([[1,2],[3,4]]).transpose()</code> → <code>[[1,3],[2,4]]</code></td></tr></tbody></table><h2 id="code-examples" tabindex="-1"><a class="header-anchor" href="#code-examples"><span>Code Examples</span></a></h2><h3 id="_1-flatten" tabindex="-1"><a class="header-anchor" href="#_1-flatten"><span>1. <code>.flatten()</code></span></a></h3><p>Populate a multi-dimensional array and flatten it:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> omArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;openmadness&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> matrix <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>\n<span class="line">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Use case:</strong> Quickly reduce data for summation, search, or plotting tasks.</p><hr><h3 id="_2-reshape-shape" tabindex="-1"><a class="header-anchor" href="#_2-reshape-shape"><span>2. <code>.reshape(shape)</code></span></a></h3><p>Change the structure of your data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[1, 2, 3], [4, 5, 6]]</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reshape</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[1, 2], [3, 4], [5, 6]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The total number of elements must match (e.g., 6 = 2×3 or 3×2).</p></div><hr><h3 id="_3-transpose" tabindex="-1"><a class="header-anchor" href="#_3-transpose"><span>3. <code>.transpose()</code></span></a></h3><p>Flip rows and columns (applies to 2D):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>\n<span class="line">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[1, 4], [2, 5], [3, 6]]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="best-practices-for-working-with-multidimensional-arrays" tabindex="-1"><a class="header-anchor" href="#best-practices-for-working-with-multidimensional-arrays"><span>Best Practices for Working with Multidimensional Arrays</span></a></h2><ul><li><strong>Avoid Deep Nesting:</strong> Minimize excessive nesting to keep your code maintainable.</li><li><strong>Use Descriptive Variable Names:</strong> Use clear, meaningful names for arrays to make your code more understandable.</li><li><strong>Check Array Lengths:</strong> Always check the array&#39;s length before accessing its elements to avoid errors and undefined values.</li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Multi-dimensional arrays are powerful tools for organizing complex data structures. They are widely used in mathematics, data science, and many programming applications.</p><blockquote><p><strong>Note:</strong> It is essential to ractice creating and manipulating multi-dimensional arrays to become comfortable with their structure and usage.</p></blockquote>',64)]))}]]),i=JSON.parse('{"path":"/guide/multi-dimensional-arrays.html","title":"Multi-Dimensional Arrays","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Example of a Multi-Dimensional Array?","slug":"example-of-a-multi-dimensional-array","link":"#example-of-a-multi-dimensional-array","children":[]},{"level":2,"title":"Using Existing Arrays as Elements","slug":"using-existing-arrays-as-elements","link":"#using-existing-arrays-as-elements","children":[]},{"level":2,"title":"Accessing Elements of an Array","slug":"accessing-elements-of-an-array","link":"#accessing-elements-of-an-array","children":[]},{"level":2,"title":"Iterating Over Multidimensional Array","slug":"iterating-over-multidimensional-array","link":"#iterating-over-multidimensional-array","children":[{"level":3,"title":"Use forEach() to Iterate Over Multidimensional Array","slug":"use-foreach-to-iterate-over-multidimensional-array","link":"#use-foreach-to-iterate-over-multidimensional-array","children":[]},{"level":3,"title":"Use Cases","slug":"use-cases","link":"#use-cases","children":[]}]},{"level":2,"title":"Adding Elements to a Multidimensional Array","slug":"adding-elements-to-a-multidimensional-array","link":"#adding-elements-to-a-multidimensional-array","children":[]},{"level":2,"title":"Removing Elements From a Multidimensional Array","slug":"removing-elements-from-a-multidimensional-array","link":"#removing-elements-from-a-multidimensional-array","children":[{"level":3,"title":"Higher Dimensions","slug":"higher-dimensions","link":"#higher-dimensions","children":[]}]},{"level":2,"title":"Some Core Transformations","slug":"some-core-transformations","link":"#some-core-transformations","children":[]},{"level":2,"title":"Code Examples","slug":"code-examples","link":"#code-examples","children":[{"level":3,"title":"1. .flatten()","slug":"_1-flatten","link":"#_1-flatten","children":[]},{"level":3,"title":"2. .reshape(shape)","slug":"_2-reshape-shape","link":"#_2-reshape-shape","children":[]},{"level":3,"title":"3. .transpose()","slug":"_3-transpose","link":"#_3-transpose","children":[]}]},{"level":2,"title":"Best Practices for Working with Multidimensional Arrays","slug":"best-practices-for-working-with-multidimensional-arrays","link":"#best-practices-for-working-with-multidimensional-arrays","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"updatedTime":1751287264000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"richardnuelofficial@gmail.com","commits":1,"url":"https://github.com/Richard-Emmanuel"},{"name":"AfubeAngel","username":"AfubeAngel","email":"62173614+AfubeAngel@users.noreply.github.com","commits":1,"url":"https://github.com/AfubeAngel"}],"changelog":[{"hash":"320d578cb2b2763d1b43d319faa3412aada5c55d","time":1751287264000,"email":"62173614+AfubeAngel@users.noreply.github.com","author":"AFUBE ANGEL","message":"docs/guide: multi-dimensional-arrays (#14)"},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"guide/multi-dimensional-arrays.md"}')}}]);