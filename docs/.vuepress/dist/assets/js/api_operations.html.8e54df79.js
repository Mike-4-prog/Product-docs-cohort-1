"use strict";(self.webpackChunkomarray=self.webpackChunkomarray||[]).push([[271],{7251:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>o,data:()=>p});var e=s(641);const t={},o=(0,s(6262).A)(t,[["render",function(n,a){return(0,e.uX)(),(0,e.CE)("div",null,a[0]||(a[0]=[(0,e.Fv)('<h2 id="operations" tabindex="-1"><a class="header-anchor" href="#operations"><span>Operations</span></a></h2><p>This page provides a complete reference to all supported operations available on <code>omArray</code> instances in Openmadness. These include arithmetic, logical, reduction, and filtering operations.</p><p>All operations are <strong>non-destructive</strong> by defaultâ€”each method returns a new <code>omArray</code>, leaving the original unchanged.</p><p>For usage examples and real-world workflows, see <a href="http://localhost:8080/get-started/basic-usage.html" target="_blank" rel="noopener noreferrer">Basic Usage</a> and <a href="http://localhost:8080/guide/working-with-omArray.html" target="_blank" rel="noopener noreferrer">Working with omArray</a>.</p><h3 id="categories-of-operations" tabindex="-1"><a class="header-anchor" href="#categories-of-operations"><span>Categories of Operations</span></a></h3><p>Operations are organized into the following groups:</p><h4 id="_1-arithmetic-operations" tabindex="-1"><a class="header-anchor" href="#_1-arithmetic-operations"><span>1. Arithmetic Operations</span></a></h4><p>Perform element-wise computations between two arrays or an array and a scalar.</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>add()</code></td><td>Element-wise addition</td></tr><tr><td><code>subtract()</code></td><td>Element-wise subtraction</td></tr><tr><td><code>multiply()</code></td><td>Element-wise multiplication</td></tr><tr><td><code>divide()</code></td><td>Element-wise division</td></tr><tr><td><code>mod()</code></td><td>Element-wise modulo operation</td></tr><tr><td><code>pow()</code></td><td>Element-wise exponentiation</td></tr></tbody></table><p><strong>Example:</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 7, 9]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><h4 id="logical-operations" tabindex="-1"><a class="header-anchor" href="#logical-operations"><span>Logical Operations</span></a></h4></li></ol><p>Perform comparison-based operations that return boolean arrays.</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>equal()</code></td><td>Element-wise equality check</td></tr><tr><td><code>notEqual()</code></td><td>Element-wise inequality check</td></tr><tr><td><code>greater()</code></td><td>Greater than comparison</td></tr><tr><td><code>less()</code></td><td>Less than comparison</td></tr><tr><td><code>greaterEqual()</code></td><td>Greater than or equal</td></tr><tr><td><code>lessEqual()</code></td><td>Less than or equal</td></tr></tbody></table><p>Example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [true, false, true]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These return boolean <code>omArray</code> instances and are commonly used with <a href="http://localhost:8080/api/logical-masking-and-filtering.html" target="_blank" rel="noopener noreferrer">Logical Masking and Fltering</a></p><ol start="3"><li><h4 id="reduction-operations" tabindex="-1"><a class="header-anchor" href="#reduction-operations"><span>Reduction Operations</span></a></h4></li></ol><p>Compute a single result (or reduced shape) from an entire array.</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>sum()</code></td><td>Total sum of elements</td></tr><tr><td><code>mean()</code></td><td>Average value</td></tr><tr><td><code>min()</code></td><td>Minimum element</td></tr><tr><td><code>max()</code></td><td>Maximum element</td></tr><tr><td><code>argMin()</code></td><td>Index of the minimum value</td></tr><tr><td><code>argMax()</code></td><td>Index of the maximum value</td></tr></tbody></table><p>Example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> total <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 43</span></span>\n<span class="line"><span class="token keyword">const</span> index <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">argMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Use <code>argMin()</code> and <code>argMax()</code> only with 1D arrays for now. Multi-dimensional support is planned in a future release.</p></div><h4 id="_4-broadcasting" tabindex="-1"><a class="header-anchor" href="#_4-broadcasting"><span>4. Broadcasting</span></a></h4><p>OpenMadness supports broadcasting between arrays of different shapes, following simplified NumPy-style rules.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment">// result.toArray():</span></span>\n<span class="line"><span class="token comment">// [</span></span>\n<span class="line"><span class="token comment">//   [10, 20, 30],</span></span>\n<span class="line"><span class="token comment">//   [20, 40, 60]</span></span>\n<span class="line"><span class="token comment">// ]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-logical-masking-and-filtering" tabindex="-1"><a class="header-anchor" href="#_5-logical-masking-and-filtering"><span>5. Logical Masking and Filtering</span></a></h4><p>Use boolean masks to select or filter array values based on conditions.</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>mask()</code></td><td>Apply a boolean mask to extract values</td></tr><tr><td><code>where()</code></td><td>Return indices where condition is true</td></tr><tr><td><code>select()</code></td><td>Select values by condition or index</td></tr></tbody></table><p>Example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">omArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">const</span> condition <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">greater</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [false, true, true]</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">const</span> filtered <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">mask</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [20, 30]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See <a href="http://localhost:8080/api/logical-masking-and-filtering.html" target="_blank" rel="noopener noreferrer">Logical Masking and Filtering</a> for advanced usage</p><h3 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span>Notes</span></a></h3><div class="hint-container warning"><p class="hint-container-title">Shape Compatibility</p><p>All operations require shape compatibility. If shapes are incompatible, an error will be thrown.</p></div><div class="hint-container tip"><p class="hint-container-title">Immutability</p><p>All methods are immutable unless explicitly stated. In-place operations are planned in a future release.</p></div><div class="hint-container info"><p class="hint-container-title">Scalar Support</p><p>Scalar operations are supported automatically. Example: <code>a.add(5)</code> adds 5 to each element.</p></div>',36)]))}]]),p=JSON.parse('{"path":"/api/operations.html","title":"Operations","lang":"en-US","frontmatter":{"title":"Operations","description":"Reference for arithmetic, logical, and reduction operations on omArray instances in OpenMadness.","sidebar_position":3},"headers":[{"level":2,"title":"Operations","slug":"operations","link":"#operations","children":[{"level":3,"title":"Categories of Operations","slug":"categories-of-operations","link":"#categories-of-operations","children":[]},{"level":3,"title":"Notes","slug":"notes","link":"#notes","children":[]}]}],"git":{"updatedTime":1751615753000,"contributors":[{"name":"Richard-Emmanuel","username":"Richard-Emmanuel","email":"Â–richardnuelofficial@gmail.com","commits":2,"url":"https://github.com/Richard-Emmanuel"},{"name":"Michael Uzukwu","username":"","email":"uzukwuekene.michael@gmail.com","commits":1}],"changelog":[{"hash":"bf94eca0bf90afba68875c2dd836cbca93395ea7","time":1751615753000,"email":"uzukwuekene.michael@gmail.com","author":"Michael Uzukwu","message":"Mikedocs (#33)","coAuthors":[{"name":"Richard Emmanuel","email":"104577891+Richard-Emmanuel@users.noreply.github.com"}]},{"hash":"8fdd7fc642897274d460b071cd9501cf91c37820","time":1750507911000,"email":"Â–richardnuelofficial@gmail.com","author":"Richard-Emmanuel","message":"Initial Project Setup"}]},"filePathRelative":"api/operations.md"}')}}]);